########################################################  ReviseWithArsh  #######################################################

###### Company : Goldman Sachs ######

###### Day-1 ######

####################################

# Problem : Print Anagrams together
# Link : https://practice.geeksforgeeks.org/problems/print-anagrams-together/1/

from collections import defaultdict
def Anagrams(self, words, n):
    '''
    words: list of word
    n:      no of words
    return : list of group of anagram {list will be sorted in driver code (not word in grp)}
    '''
    d=defaultdict(list)
    for i in words:
        sortedword=str(sorted(i))
        d[sortedword].append(i)
        
    ans=[]
    for i in d:
        ans.append(d[i])
    return ans

####################################

# Problem : Count the subarrays having product less than k
# Link : https://practice.geeksforgeeks.org/problems/count-the-subarrays-having-product-less-than-k1708/1/

def countSubArrayProductLessThanK(self, a, n, k):
    #Code here
    i=0
    j=0
    c=0
    p=1
    while(j<n):
        p=p*a[j]
        while(p>=k):
            p=p//a[i]
            i+=1
        c=c+(j-i+1)
        j+=1
    return c

#####################################

# Problem : Overlapping rectangles
# Link : https://practice.geeksforgeeks.org/problems/overlapping-rectangles1924/1/
# Hint : Check for 4 conditions (1st rectangle is completely left to other, completely right to other, completely top of the other
# or completely bottom of the other)

def doOverlap(self, L1, R1, L2, R2):
    #code here
    if((L1[0]<L2[0] and R1[0]<L2[0]) or (L1[0]>R2[0] and R1[0]>R2[0]) or (L1[1]<R2[1] and R1[1]<R2[1]) or (L1[1]>L2[1] and R1[1]>L2[1])):
        return 0
    else:
        return 1

            (or)

def doOverlap(self, L1, R1, L2, R2):
    #code here
    if((R1[0]<L2[0]) or (L1[0]>R2[0]) or (R1[1]>L2[1]) or (L1[1]<R2[1])):
        return 0
    else:
        return 1

####################################

##### Day-2 #####

# Problem : Run Length Encoding
# Link : https://practice.geeksforgeeks.org/problems/run-length-encoding/1/#

def encode(arr):
    ans=''
    i=0
    while(i<len(arr)):
        c=1
        while(i+1<len(arr) and arr[i]==arr[i+1]):
            c+=1
            i+=1
        ans=ans+arr[i]+str(c)
        i+=1
    return ans

###################################

# Problem : Nth Ugly Number
# Link : https://practice.geeksforgeeks.org/problems/ugly-numbers2254/1/

def getNthUglyNo(self,n):
    # code here
    t=[0]*(n)
    t[0]=1
    two=0
    three=0
    five=0
    for i in range(1,n):
        t[i]=min(t[two]*2,t[three]*3,t[five]*5)
        if(t[i]==t[two]*2):
            two+=1
        if(t[i]==t[three]*3):
            three+=1
        if(t[i]==t[five]*5):
            five+=1
    return t[n-1]


###################################

# Problem : Greatest Comon Divisor(GCD) of Strings
# Link : https://leetcode.com/problems/greatest-common-divisor-of-strings/

def gcdOfStrings(self, str1: str, str2: str) -> str:
    if(str1+str2!=str2+str1):
        return ""
    elif(str1==str2):
        return str1
    else:
        if(len(str1)>len(str2)):
            return self.gcdOfStrings(str1[len(str2):],str2)
        else:
            return self.gcdOfStrings(str2[len(str1):],str1)

#################################

###### Day-3 ######

# Problem : Find the position of Mth item
# Link : https://practice.geeksforgeeks.org/problems/find-the-position-of-m-th-item1723/1

def findPosition(self, N , M , K):
    # code here
    if(N==1):
        return 1
    ans=M%N
    ans=ans+(K-1)
    if(ans>N):
        return ans%N
    else:
        return ans

##################################

# Problem : Total Decoding Messages
# Link : https://practice.geeksforgeeks.org/problems/total-decoding-messages1235/1/

def numDecodings(self, s: str) -> int:
    n=len(s)
    t=[0]*n
    t[0]=1
    if(s[0]=='0'):
        return 0
    for i in range(1,n):
        if(s[i-1]=='0' and s[i]=='0'):
            t[i]=0
        elif(s[i-1]=='0' and s[i]!='0'):
            t[i]=t[i-1]
        elif(s[i-1]!='0' and s[i]=='0'):
            if(s[i-1]=='1' or s[i-1]=='2'):
                if(i>=2):
                    t[i]=t[i-2]
                else:
                    t[i]=1
            else:
                t[i]=0
        else:
            if(int(s[i-1:i+1])<=26):
                if(i>=2):
                    t[i]=t[i-1]+t[i-2]
                else:
                    t[i]=t[i-1]+1
            else:
                t[i]=t[i-1]
    return t[n-1]


###################################

# Problem : Number following a pattern
# Link : https://practice.geeksforgeeks.org/problems/number-following-a-pattern3126/1#

def printMinNumberForPattern(ob,S):
    # code here 
    s=''
    for i in range(len(S)+1):
        s=s+str(i+1)
    i=0
    while(i<len(S)):
        if(S[i]=='D'):
            k=i
            while(i<len(S) and S[i]=='D'):
                i+=1
            s=s[:k]+s[k:i+1][::-1]+s[i+1:]
        else:
            i+=1
    return s

###################################

# Problem : Find max 10 numbers from a list having 10 million entries.

If we use sorting here, it becomes Nlog(N) complexity which is 10M*log(10M).
But, if we use priority queue, it becomes Nlog(K) which is 10M*log(K)

With a priority queue implemented with a heap, the complexity of insertion to queue is O(log N)
So, whenever we encounter a number greater than the smallest number of the priority queue,
we simply insert it into the queue.

Thus, we will be able to reduce the complexity from Nlog(N) to Nlog(K)


####################################

# Problem : Find Missing and Repeating
# Link : https://practice.geeksforgeeks.org/problems/find-missing-and-repeating2512/1/

def findTwoElement( self,arr, n): 
    # code here
    xor=0
    for i in arr:
        xor=xor^i
    for i in range(1,n+1):
        xor=xor^i
    
    x=0
    y=0
    rmsbm=xor&(-xor)
    for i in arr:
        if(rmsbm&i==0):
            x=x^i
        else:
            y=y^i
    
    for i in range(1,n+1):
        if(rmsbm&i==0):
            x=x^i
        else:
            y=y^i
    
    for i in arr:
        if(i==x):
            return [x,y]
        elif(i==y):
            return [y,x]


def findTwoElement( self,arr, n): 
        # code here
        sumarr=sum(arr)
        summ=n*(n+1)//2
        aminusb=sumarr-summ
        
        sumarr=0
        for i in arr:
            sumarr=sumarr+i*i
        summ=0
        for i in range(1,n+1):
            summ=summ+i*i
        
        asquareminusbsquare=sumarr-summ
        
        aplusb=asquareminusbsquare//aminusb
        
        a=(aplusb+aminusb)//2
        b=aplusb-a
        
        return [a,b]

########################################

# Problem : Program to find number of squares on a N*N Chessboard
# Hint : It is the summation of all small squares
# (Number of 1*1 squares + 2*2 squares + ... + Number of N*N squares)

def squaresInChessBoard(self, N):
    # code here
    return N*(N+1)*(2*N+1)//6

########################################
